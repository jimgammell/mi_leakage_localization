import numpy as np

from utils.template_attack import TemplateAttack

def evaluate_template_attack_exploitability(profiling_dataset, attack_dataset, leakage_assessment, poi_count=20):
    points_of_interest = np.abs(leakage_assessment.squeeze()).argsort()[-poi_count:]
    template_attack = TemplateAttack(points_of_interest, target_key='label')
    template_attack.profile(profiling_dataset)
    name = profiling_dataset.__class__.__name__
    if name =='ASCADv1':
        pass
    elif name == 'DPAv4':
        from datasets.dpav4 import to_key_preds
        args_keys = ['plaintext', 'offset']
        constants = [profiling_dataset.mask]
    elif name == 'AES_HD':
        pass
    elif name == 'AES_PTv2':
        pass
    else:
        raise NotImplementedError
    rank_over_time = template_attack.attack(attack_dataset, arg_keys=args_keys, constants=constants, int_var_to_key_fn=to_key_preds)
    return rank_over_time

def plot_rank_over_time(rank_over_time, ax, plot_kwargs={}):
    ax.plot(np.median(rank_over_time, axis=0), linestyle='-', **plot_kwargs)
    ax.fill_between(np.arange(rank_over_time.shape[-1]), rank_over_time.min(axis=0), rank_over_time.max(axis=0), alpha=0.25, **plot_kwargs)